# -*- coding: utf-8 -*-
"""
/***************************************************************************
 InteractLearnDialog
                                 A QGIS plugin
 Framework to test the algos designed during my PhD
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-04-16
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Gaston Lenczner
        email                : gaston.lenczner@delair.aero
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5 import QtWidgets, uic
from PyQt5.QtWidgets import QFileDialog

from ..coords_tool import CoordsTool
from ..utils import find_file_from_layer, get_layers
from .layers_dialog import LayersDialog

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(os.path.dirname(__file__)), 'ui/interact_learn_dialog_base.ui'))


class InteractLearnDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, iface, parent=None):
        """Constructor."""
        super(InteractLearnDialog, self).__init__(parent)
        self.iface = iface
        self.sub_dlg = LayersDialog()
        self.setupUi(self)
        self.map_tool = None
        self.checkBox_crop.toggled.connect(self.get_coords)
        self.button_nn.clicked.connect(self.return_nn)
        self.button_output.clicked.connect(self.return_output)
        self.button_layers.clicked.connect(self.open_layers)
        self.checkBox_interactive.clicked.connect(self.hide_use_annot)

    def init_from_previous_state(self, files):
        self.checkBox_interactive.setCheckState(files["interactive"] * 2)

        self.checkBox_geojson.setCheckState(bool(files["polygonize"]) * 2)

        self.checkBox_ssh.setCheckState(files["ssh"] * 2)

        self.line_nn.setText(files["neural_network"])

        self.line_output.setText(files["output_file"])

        self.checkBox_use_annot.setCheckState(files["interact_use_annots"] * 2)

        self.checkBox_dist_map.setCheckState(files["dist_map"] * 2)

        if files.get("crop_coords", False):
            self.checkBox_crop.setCheckState(2)
            self.map_tool = CoordsTool(self.iface.mapCanvas(), self)
            self.map_tool.set_data(files["crop_coords"])

        if files.get("input_files", False):
            layers, layer_list = get_layers()
            for i, layer in enumerate(layers):
                file = find_file_from_layer(layer)
                if file in files["input_files"]:
                    self.sub_dlg.listWidget.item(i).setSelected(True)
                    self.textEdit.setText(layer_list[i] + '\n')

    def return_nn(self):
        filename = QFileDialog.getOpenFileName(filter="*.pt")[0]
        self.line_nn.setText(filename)

    def return_output(self):
        filename = QFileDialog.getSaveFileName()[0]
        self.line_output.setText(filename)

    def open_layers(self):
        self.sub_dlg.show()
        result = self.sub_dlg.exec_()
        if result:
            self.textEdit.setText("\n".join([i.text() for i in self.sub_dlg.listWidget.selectedItems()]))
        else:
            self.textEdit.setText("")
            self.reload_rasters()

    def reload_rasters(self):
        """
        To load new possible rasters
        """
        self.sub_dlg = LayersDialog()

    def get_coords(self):
        if self.checkBox_crop.isChecked():
            self.map_tool = CoordsTool(self.iface.mapCanvas(), self)
            self.iface.mapCanvas().setMapTool(self.map_tool)

    def hide_use_annot(self):
        self.checkBox_use_annot.setEnabled(self.checkBox_interactive.isChecked())
